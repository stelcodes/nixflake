#cloud-config
runcmd:
  - curl https://raw.githubusercontent.com/elitak/nixos-infect/master/nixos-infect | PROVIDER=digitalocean NIXOS_IMPORT=./bootstrap.nix NIX_CHANNEL=nixos-unstable bash 2>&1 | tee /tmp/infect.log
write_files:
- path: /etc/nixos/bootstrap.nix
  permissions: '0644'
  content: |
        { pkgs, config, ... }: {
          config = {

            boot.cleanTmpDir = true;

            # hosts
            networking.hosts."104.236.219.156" = [ "nube1" ];
            networking.hosts."167.99.122.78" = [ "morado1" ];

            # Set your time zone.
            time.timeZone = "America/Detroit";

            # Select internationalisation properties.
            i18n.defaultLocale = "en_US.UTF-8";

            console.font = "Lat2-Terminus16";
            console.useXkbConfig = true;
            # console.keyMap = "us";

            security.doas.enable = true;
            security.doas.extraRules = [{
              users = [ "stel" ];
              keepEnv = true;
              noPass = true;
              # persist = true;
            }];
            security.sudo.enable = false;
            security.acme.email = "stel@stel.codes";
            security.acme.acceptTerms = true;

            users.mutableUsers = true;
            # Define a user account. Don't forget to set a password with ‘passwd’.
            users.stel.isNormalUser = true;
            users.stel.extraGroups = [ "wheel" "networkmanager" "jackaudio" "audio" ];
            users.stel.openssh.authorizedKeys.keys = [
              "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFl1QCu19AUDFaaZZAt4YtnxxdX+JDvDz5rdnBEfH/Bb stel@azul"
            ];
            users.stel.shell = pkgs.zsh;

            environment.variables.BROWSER = "firefox";
            environment.variables.EDITOR = "nvim";
            environment.systemPackages = with pkgs; [
              zsh
              starship
              neovim
              git
              bat
              # process monitoring
              htop
              procs
              # cross platform trash bin
              trash-cli
              # alternative find, also used for fzf
              fd
              # system info
              neofetch
              # http client
              httpie
              # download stuff from the web
              wget
              # searching text
              ripgrep
              # documentaion
              tealdeer
              # archiving
              unzip
              # backups
              restic
              # ls replacement
              exa
              # make replacement
              just
              # math
              rink
              # nix
              nixfmt
              nix-prefetch-github
              # timeless db
              sqlite
              # for urlview tmux plugin
              urlview
            ];

            environment.etc.gitconfig.text = ''
              [init]
                defaultBranch = "main"
              [merge]
                ff = "only"
              [user]
                email = "stel@stel.codes"
                name = "Stel Abrego"
              [core]
                excludesFile = /etc/gitignore
            '';
            environment.etc.gitignore.text = ''
              *Session.vim
              *.DS_Store
              *.swp
              *.direnv
              /direnv
              /local
              /node_modules
              *.jar
            '';

            programs.zsh.enable = true;
            programs.zsh.shellAliases."nix-search" = "nix repl '<nixpkgs>'";
            programs.zsh.shellAliases."source-zsh" = "source $HOME/.config/zsh/.zshrc";
            programs.zsh.shellAliases."source-tmux" = "tmux source-file ~/.tmux.conf";
            programs.zsh.shellAliases."update" = "doas nix-channel --update";
            programs.zsh.shellAliases."switch" = "doas nixos-rebuild switch";
            programs.zsh.shellAliases."hg" = "history | grep";
            programs.zsh.shellAliases."wifi" = "nmtui";
            programs.zsh.shellAliases."vpn" = "doas protonvpn connect -f";
            programs.zsh.shellAliases."attach" = "tmux attach";
            programs.zsh.shellAliases."gui" = "exec sway";
            programs.zsh.shellAliases."absolutepath" = "realpath -e";
            programs.zsh.shellAliases."ls" = "exa";
            programs.zsh.shellAliases."grep" = "rg";
            programs.zsh.shellAliases."restic-backup-napi" =
              "restic -r /run/media/stel/Napi/restic-backups/ backup --files-from=/home/stel/config/misc/restic/include.txt --exclude-file=/home/stel/config/misc/restic/exclude.txt";
            programs.zsh.shellAliases."restic-mount-napi" =
              "restic -r /run/media/stel/Napi/restic-backups/ mount /home/stel/backups/Napi-restic";
            programs.zsh.shellAliases."restic-backup-mapache" =
              "restic -r /run/media/stel/Mapache/restic-backups/ backup --files-from=/home/stel/config/misc/restic/include.txt --exclude-file=/home/stel/config/misc/restic/exclude.txt";
            programs.zsh.shellAliases."restic-mount-mapache" =
              "restic -r /run/media/stel/Mapache/restic-backups/ mount /home/stel/backups/Mapache-restic";
            programs.zsh.shellAliases."pdf" = "evince-previewer";
            programs.zsh.shellAliases."play-latest-obs-recording" =
              "mpv $(ls /home/stel/videos/obs | sort --reverse | head -1)";
            # Creating this alias because there's a weird bug with the clj command producing this error on nube1:
            # rlwrap: error: Cannot execute BINDIR/clojure: No such file or directory
            programs.zsh.shellAliases."clj" = "clojure";
            programs.zsh.shellAliases."screenshot" =
              "slurp | grim -g - ~/pictures/screenshots/grim:$(date -Iseconds).png";
            programs.zsh.shellAliases."bat" = "bat --theme=base16";
            programs.zsh.promptInit = ''eval "$(starship init zsh)"'';
            programs.zsh.autosuggestions.enable = true;
            programs.zsh.ohMyZsh.enable = true;
            programs.zsh.ohMyZsh.plugins = [ "httpie" "colored-man-pages" ];

            programs.neovim.enable = true;
            programs.neovim.defaultEditor = true;
            programs.neovim.viAlias = true;
            programs.neovim.vimAlias = true;
            programs.neovim.runtime = {
              "filetype.vim".source = /home/stel/config/modules/neovim/filetype.vim;
            };
            programs.neovim.configure.customRC =
              builtins.readFile /home/stel/config/modules/neovim/extra-config.vim;
            programs.neovim.configure.packages.myVimPackage = let
              stel-paredit = pkgs.vimUtils.buildVimPlugin {
                pname = "stel-paredit";
                version = "1.0";
                src = pkgs.fetchFromGitHub {
                  owner = "stelcodes";
                  repo = "paredit";
                  rev = "27d2ea61ac6117e9ba827bfccfbd14296c889c37";
                  sha256 = "1bj5m1b4n2nnzvwbz0dhzg1alha2chbbdhfhl6rcngiprbdv0xi6";
                };
              };
            in with pkgs.vimPlugins; {
              start = [
                nerdtree
                vim-obsession
                vim-commentary
                vim-dispatch
                vim-projectionist
                vim-eunuch
                vim-fugitive
                vim-sensible
                vim-nix
                lightline-vim
                conjure
                vim-fish
                vim-css-color
                tabular
                vim-gitgutter
                vim-auto-save
                ale
                nord-vim
                stel-paredit
              ];
            };

            programs.tmux.enable = true;
            programs.tmux.baseIndex = 1;
            programs.tmux.clock24 = true;
            programs.tmux.escapeTime = 10;
            programs.tmux.keyMode = "vi";
            programs.tmux.newSession = true;
            programs.tmux.terminal = "screen-256color";
            programs.tmux.extraConfig = let
              continuumSaveScript =
                "${pkgs.tmuxPlugins.continuum}/share/tmux-plugins/continuum/scripts/continuum_save.sh";
            in ''
              set-option -g prefix M-a

              set -ga terminal-overrides ',alacritty:Tc'

              # https://is.gd/8VKFEY
              set -g focus-events on

              # Custom Keybindings
              bind -n M-h previous-window
              bind -n M-l next-window
              bind -n M-x kill-pane
              bind -n M-d detach
              bind -n M-f new-window -c "#{pane_current_path}"
              bind -n M-s choose-tree -s
              bind -n M-c copy-mode
              bind -n M-r command-prompt 'rename-session %%'
              bind -n M-n command-prompt 'new-session'
              bind -n M-t source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded!"

              # Fixes tmux escape input lag, see https://git.io/JtIsn
              set -sg escape-time 10

              # Update environment
              set -g update-environment "PATH"

              set -g status-style fg=white,bg=default
              set -g status-justify left
              set -g status-left ""
              # setting status right makes continuum fail! Apparently it uses the status to save itself? Crazy. https://git.io/JOXd9
              set -g status-right "#[fg=yellow,bg=default][#S] #[fg=default,bg=default]in #[fg=green,bg=default]#h#(${continuumSaveScript})"

              run-shell ${pkgs.tmuxPlugins.urlview.rtp}

              run-shell ${pkgs.tmuxPlugins.yank.rtp}

              set -g @resurrect-processes '"~bin/vim->vim -S"'
              run-shell ${pkgs.tmuxPlugins.resurrect.rtp}

              set -g @continuum-restore 'on'
              set -g @continuum-save-interval '1' # minutes
              run-shell ${pkgs.tmuxPlugins.continuum.rtp}
            '';
          };

        }
